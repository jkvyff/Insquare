{"version":3,"sources":["hook/sidebar.js","hook/jordan.js","hook/sampleDot.js","hook/line.js","hook/wings.js","hook/square.js","hook/svgMap.js","hook/svgDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","width","height","dPath","setDPath","sampleCount","setSampleCount","precision","setprecision","showLines","setShowLines","showWings","setShowWings","scanPos","setScanPos","useState","xPosition","setX","useForm","defaultValues","handleSubmit","register","errors","useEffect","className","style","transform","minHeight","onClick","onSubmit","value","length","Number","htmlFor","id","type","name","ref","required","validate","str","toLowerCase","message","axis","xstep","xmin","xmax","x","onChange","res","Jordan","fill","d","cx","cy","r","Line","line","ax","ay","bx","by","x1","y1","x2","y2","strokeWidth","stroke","Wings","wings","left","right","Square","square","a","b","c","console","log","SVGMap","svgGeom","nodes","lines","squares","matrix","setMatrix","dragging","setDragging","startX","setStartX","startY","setStartY","zoom","scale","m","len","i","onDragStart","e","startPosX","clientX","changedTouches","startPosY","clientY","onDragMove","y","dx","dy","pan","onDragEnd","viewBox","xmlns","onMouseDown","onTouchStart","onMouseMove","onTouchMove","onMouseUp","onTouchEnd","onWheel","deltaY","join","map","node","key","wing","SVGDisplay","useRef","setNodes","setLines","setWings","wingsScores","setWingsScores","setSquares","allWings","halfHypoDistance","Math","sqrt","pow","yDiff","xDiff","slope","invSlope","midpoint","slopeChange","sin","atan","invSlopeChange","push","calcWings","posA","allLines","offset","posB","calcLines","properties","svgPathProperties","totalLength","getTotalLength","allNodes","getPointAtLength","calcNodes","wingsMinDistanceToPath","lMinDist","MAX_SAFE_INTEGER","rMinDist","smallestDist","j","lDist","rDist","max","calcWingsScores","allSquares","target","calcSquares","Loaded","wasm","greet","Unloaded","loading","loadWasm","App","setLoading","setWasm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6ed3194c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Slider from \"react-input-slider\";\n\nconst Sidebar = ({\n  width,\n  height,\n  dPath,\n  setDPath,\n  sampleCount,\n  setSampleCount,\n  precision,\n  setprecision,\n  showLines,\n  setShowLines,\n  showWings,\n  setShowWings,\n  scanPos,\n  setScanPos,\n}) => {\n  const [xPosition, setX] = useState(-width);\n\n  const { handleSubmit, register, errors } = useForm({\n    defaultValues: {\n      dPath,\n      sampleCount,\n      precision,\n      showLines,\n      showWings,\n    },\n  });\n\n  const onSubmit = (value) => {\n    value.dPath && value.dPath.length > 0 && setDPath(value.dPath);\n    value.sampleCount && setSampleCount(Number(value.sampleCount));\n    value.precision && setprecision(Number(value.precision));\n    typeof value.showLines && setShowLines(value.showLines);\n    typeof value.showWings && setShowWings(value.showWings);\n  };\n\n  const toggleMenu = () => {\n    if (xPosition < 0) {\n      setX(0);\n    } else {\n      setX(-width);\n    }\n  };\n\n  useEffect(() => {\n    setX(0);\n  }, []);\n\n  return (\n    <>\n      <div\n        className=\"side-bar\"\n        style={{\n          transform: `translatex(${xPosition}px)`,\n          width: width - 30,\n          minHeight: height,\n        }}\n      >\n        <button\n          onClick={() => toggleMenu()}\n          className=\"toggle-menu\"\n          style={{\n            transform: `translate(${width - 30}px, 2vh)`,\n          }}\n        ></button>\n        <div className=\"content\">\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <div>\n              <label htmlFor=\"dPath\">SVG Path: </label>\n              <input\n                id=\"dPath\"\n                type=\"text\"\n                name=\"dPath\"\n                ref={register({\n                  required: false,\n                  validate: (str) =>\n                    (str &&\n                      str[0].toLowerCase() === \"m\" &&\n                      str[str.length - 1].toLowerCase() === \"z\") ||\n                    \"Please format SVG Path correctly, beginning with M and closing with Z\",\n                })}\n              />\n              <p className=\"error-message\">\n                {errors.dPath && errors.dPath.message}\n              </p>\n            </div>\n\n            <div>\n              <label htmlFor=\"sampleCount\">Sample Count: </label>\n              <input\n                id=\"sampleCount\"\n                type=\"text\"\n                name=\"sampleCount\"\n                ref={register({\n                  validate: (value) =>\n                    (0 <= value && value <= 1000) ||\n                    \"Samples only go up to 1000\",\n                })}\n              />\n              <p className=\"error-message\">\n                {errors.sampleCount && errors.sampleCount.message}\n              </p>\n            </div>\n\n            <div>\n              <label htmlFor=\"precision\">precision: </label>\n              <input\n                id=\"precision\"\n                type=\"text\"\n                name=\"precision\"\n                ref={register({\n                  validate: (value) =>\n                    (0 <= value && value <= 1) || \"Please stay between 0 and 1\",\n                })}\n              />\n              <p className=\"error-message\">\n                {errors.precision && errors.precision.message}\n              </p>\n            </div>\n\n            <div>{\"Node: \" + scanPos}</div>\n\n            <Slider\n              className=\"slider\"\n              axis=\"x\"\n              xstep={1}\n              xmin={0}\n              xmax={sampleCount - 2}\n              x={scanPos}\n              onChange={(res) => setScanPos(res.x)}\n            />\n\n            <h3>Show Features</h3>\n\n            <div>\n              <label className=\"checkLabel\" htmlFor=\"showLines\">\n                <div>\n                  <input\n                    id=\"showLines\"\n                    type=\"checkbox\"\n                    className=\"checkbox\"\n                    name=\"showLines\"\n                    ref={register}\n                  />\n                  Lines\n                </div>\n              </label>\n              <p className=\"error-message\">\n                {errors.showLines && errors.showLines.message}\n              </p>\n            </div>\n\n            <div>\n              <label className=\"checkLabel\" htmlFor=\"showWings\">\n                <div>\n                  <input\n                    id=\"showWings\"\n                    type=\"checkbox\"\n                    className=\"checkbox\"\n                    name=\"showWings\"\n                    ref={register}\n                  />\n                  Wings\n                </div>\n              </label>\n              <p className=\"error-message\">\n                {errors.showWings && errors.showWings.message}\n              </p>\n            </div>\n\n            <div className=\"submit-area\">\n              <button className=\"submit-button\" type=\"submit\">\n                Generate\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\n\nconst Jordan = ({ dPath, transform }) => {\n  return (\n    <>\n      <path fill=\"#FF0066\" d={dPath} transform={transform} />\n    </>\n  );\n};\n\nexport default Jordan;\n","import React from \"react\";\n\nconst Jordan = ({ id, cx, cy, transform }) => {\n  return (\n    <>\n      <circle\n        id={id}\n        cx={cx}\n        cy={cy}\n        r=\".5\"\n        fill=\"blue\"\n        transform={transform}\n      />\n    </>\n  );\n};\n\nexport default Jordan;\n","import React from \"react\";\n\nconst Line = ({ line, transform }) => {\n  const { ax, ay, bx, by } = line;\n  return (\n    <>\n      <line\n        x1={ax}\n        y1={ay}\n        x2={bx}\n        y2={by}\n        strokeWidth=\".1\"\n        stroke=\"cyan\"\n        transform={transform}\n      />\n    </>\n  );\n};\n\nexport default Line;\n","import React from \"react\";\n\nconst Wings = ({ line, wings, strokeWidth, transform }) => {\n  const { ax, ay } = line;\n  const { left, right } = wings;\n  // const colors = [\n  //   \"#363f9c\",\n  //   \"#464096\",\n  //   \"#564190\",\n  //   \"#66438a\",\n  //   \"#764483\",\n  //   \"#86457d\",\n  //   \"#954777\",\n  //   \"#a54871\",\n  //   \"#b5496b\",\n  //   \"#c54a64\",\n  //   \"#d54b5e\",\n  //   \"#e54d58\",\n  //   \"#f54e52\",\n  // ];\n  return (\n    <>\n      <line\n        x1={ax}\n        y1={ay}\n        x2={left[0]}\n        y2={left[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"purple\"\n        transform={transform}\n      />\n      <circle\n        cx={left[0]}\n        cy={left[1]}\n        r=\".5\"\n        fill=\"purple\"\n        transform={transform}\n      />\n      {/* <line\n        x1={bx}\n        y1={by}\n        x2={left[0]}\n        y2={left[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"green\"\n        transform={transform}\n      /> */}\n\n      <line\n        x1={ax}\n        y1={ay}\n        x2={right[0]}\n        y2={right[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"blue\"\n        transform={transform}\n      />\n      <circle\n        cx={right[0]}\n        cy={right[1]}\n        r=\".5\"\n        fill=\"blue\"\n        transform={transform}\n      />\n      {/* <line\n        x1={bx}\n        y1={by}\n        x2={right[0]}\n        y2={right[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"green\"\n        transform={transform}\n      /> */}\n    </>\n  );\n};\n\nexport default Wings;\n","import React from \"react\";\n\nconst Square = ({ square, strokeWidth, transform }) => {\n  const { a, b, c, d } = square;\n  console.log(square);\n\n  return (\n    <>\n      <line\n        x1={a[0]}\n        y1={a[1]}\n        x2={b[0]}\n        y2={b[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"black\"\n        transform={transform}\n      />\n      <line\n        x1={b[0]}\n        y1={b[1]}\n        x2={c[0]}\n        y2={c[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"black\"\n        transform={transform}\n      />\n      <line\n        x1={c[0]}\n        y1={c[1]}\n        x2={d[0]}\n        y2={d[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"black\"\n        transform={transform}\n      />\n      <line\n        x1={d[0]}\n        y1={d[1]}\n        x2={a[0]}\n        y2={a[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"black\"\n        transform={transform}\n      />\n    </>\n  );\n};\n\nexport default Square;\n","import React, { useState } from \"react\";\nimport Jordan from \"./jordan\";\nimport SampleDot from \"./sampleDot\";\nimport Line from \"./line\";\nimport Wings from \"./wings\";\nimport Square from \"./square\";\n\nconst SVGMap = ({\n  svgGeom,\n  dPath,\n  nodes,\n  lines,\n  wings,\n  squares,\n  showLines,\n  showWings,\n}) => {\n  const [matrix, setMatrix] = useState([2, 0, 0, 2, 200, 200]);\n  const [dragging, setDragging] = useState(false);\n  const [startX, setStartX] = useState(0);\n  const [startY, setStartY] = useState(0);\n\n  const pan = (dx, dy) => {\n    const m = [...matrix];\n    m[4] += dx;\n    m[5] += dy;\n    setMatrix(m);\n  };\n\n  const zoom = (scale) => {\n    const m = [...matrix];\n    const len = m.length;\n    for (let i = 0; i < len; i++) {\n      m[i] *= scale;\n    }\n    m[4] += ((1 - scale) * 400) / 2;\n    m[5] += ((1 - scale) * 400) / 2;\n    setMatrix(m);\n  };\n\n  const onDragStart = (e) => {\n    const startPosX =\n      typeof e.clientX === \"undefined\"\n        ? e.changedTouches[0].clientX\n        : e.clientX;\n    const startPosY =\n      typeof e.clientY === \"undefined\"\n        ? e.changedTouches[0].clientY\n        : e.clientY;\n\n    setDragging(true);\n    setStartX(startPosX);\n    setStartY(startPosY);\n  };\n\n  const onDragMove = (e) => {\n    if (!dragging) {\n      return;\n    }\n\n    const x =\n      typeof e.clientX === \"undefined\"\n        ? e.changedTouches[0].clientX\n        : e.clientX;\n    const y =\n      typeof e.clientY === \"undefined\"\n        ? e.changedTouches[0].clientY\n        : e.clientY;\n\n    const dx = x - startX;\n    const dy = y - startY;\n\n    pan(dx, dy);\n\n    setStartX(x);\n    setStartY(y);\n  };\n\n  const onDragEnd = () => {\n    setDragging(false);\n  };\n\n  const onWheel = (e) => {\n    if (e.deltaY < 0) {\n      zoom(1.05);\n    } else {\n      zoom(0.95);\n    }\n  };\n\n  return (\n    <svg\n      className=\"svg\"\n      ref={svgGeom}\n      width=\"100px\"\n      height=\"100px\"\n      viewBox=\"0 0 400 400\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      onMouseDown={(e) => onDragStart(e)}\n      onTouchStart={(e) => onDragStart(e)}\n      onMouseMove={(e) => onDragMove(e)}\n      onTouchMove={(e) => onDragMove(e)}\n      onMouseUp={(e) => onDragEnd(e)}\n      onTouchEnd={(e) => onDragEnd(e)}\n      onWheel={(e) => onWheel(e)}\n    >\n      <g transform={`matrix(${matrix.join(\" \")})`}>\n        <Jordan dPath={dPath} />\n        {nodes.map((node, i) =>\n          lines.length > 1000 && i % 10 === 0 ? (\n            <SampleDot key={i + \"a\"} cx={node.x} cy={node.y} />\n          ) : (\n            <SampleDot key={i + \"a\"} cx={node.x} cy={node.y} />\n          )\n        )}\n        {showLines &&\n          lines.length < 10000 &&\n          lines.map((line, i) => <Line key={i} line={line} />)}\n        {showWings &&\n          wings.length < 10000 &&\n          wings.map((wing, i) =>\n            wings.length > 1000 && i % 2 === 0 ? (\n              <Wings key={i} line={lines[i]} wings={wing} strokeWidth=\".1\" />\n            ) : (\n              <Wings key={i} line={lines[i]} wings={wing} strokeWidth=\".1\" />\n            )\n          )}\n        {squares.map((square, i) => (\n          <Square key={i} square={square} strokeWidth=\".5\" />\n        ))}\n      </g>\n    </svg>\n  );\n};\n\nexport default SVGMap;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Sidebar from \"./sidebar\";\nimport SVGMap from \"./svgMap\";\n\nimport { svgPathProperties } from \"svg-path-properties\";\n\nconst SVGDisplay = () => {\n  const svgGeom = useRef(null);\n\n  const [dPath, setDPath] = useState(\n    \"M25.1,-46.5C31.3,-40,33.9,-30.6,43.3,-22.3C52.7,-14.1,68.8,-7,76.2,4.2C83.5,15.5,82.1,31.1,68.2,31.5C54.4,32,28,17.4,14.5,17.2C1.1000000000000014,17,0.5,31.1,-8,45C-16.6,58.9,-33.1,72.5,-42.5,70.3C-51.9,68.2,-54.1,50.3,-62,36C-69.9,21.7,-83.6,10.8,-75,5C-66.4,-0.9000000000000004,-35.6,-1.8000000000000007,-21.4,-5.300000000000001C-7.200000000000003,-8.799999999999997,-9.7,-14.899999999999999,-8.899999999999999,-24.5C-8.1,-34,-4,-47,2.7,-51.7C9.5,-56.4,19,-53,25.1,-46.5Z\"\n  );\n  // M25.1,-46.5C31.3,-40,33.9,-30.6,43.3,-22.3C52.7,-14.1,68.8,-7,76.2,4.2C83.5,15.5,82.1,31.1,68.2,31.5C54.4,32,28,17.4,14.5,17.2C1.1000000000000014,17,0.5,31.1,-8,45C-16.6,58.9,-33.1,72.5,-42.5,70.3C-51.9,68.2,-54.1,50.3,-62,36C-69.9,21.7,-83.6,10.8,-75,5C-66.4,-0.9000000000000004,-35.6,-1.8000000000000007,-21.4,-5.300000000000001C-7.200000000000003,-8.799999999999997,-9.7,-14.899999999999999,-8.899999999999999,-24.5C-8.1,-34,-4,-47,2.7,-51.7C9.5,-56.4,19,-53,25.1,-46.5Z\n\n  const [sampleCount, setSampleCount] = useState(50);\n  const [nodes, setNodes] = useState([]);\n  const [lines, setLines] = useState([]);\n  const [wings, setWings] = useState([]);\n  const [wingsScores, setWingsScores] = useState([]);\n  const [squares, setSquares] = useState([]);\n\n  const [showLines, setShowLines] = useState(false);\n  const [showWings, setShowWings] = useState(false);\n\n  const [precision, setprecision] = useState(0.02);\n  const [scanPos, setScanPos] = useState(0);\n\n  const calcNodes = () => {\n    const properties = new svgPathProperties(dPath);\n    const totalLength = properties.getTotalLength();\n\n    const allNodes = [];\n\n    for (let i = 1; i <= sampleCount; i++) {\n      allNodes.push(\n        properties.getPointAtLength((1 / sampleCount) * totalLength * i)\n      );\n    }\n\n    setNodes(allNodes);\n    return allNodes;\n  };\n\n  const calcLines = (nodes) => {\n    let posA = 0;\n    const allLines = [];\n\n    // const posD = scanPos < sampleCount ? scanPos : 0;\n    // let posC = posD + 1;\n    // while (posC !== posD) {\n    //   allLines.push({\n    //     ax: nodes[posD].x,\n    //     ay: nodes[posD].y,\n    //     bx: nodes[posC].x,\n    //     by: nodes[posC].y,\n    //   });\n\n    //   posC === sampleCount - 1 ? (posC = 0) : posC++;\n    // }\n\n    let offset = posA + 1;\n    while (offset < sampleCount / 2 + 1) {\n      while (posA < sampleCount) {\n        const posB = (posA + offset) % sampleCount;\n        allLines.push({\n          ax: nodes[posA].x,\n          ay: nodes[posA].y,\n          bx: nodes[posB].x,\n          by: nodes[posB].y,\n        });\n        posA++;\n      }\n      posA = 0;\n      offset++;\n    }\n    setLines(allLines);\n    return allLines;\n  };\n\n  const calcWings = (lines) => {\n    const allWings = [];\n\n    for (let i = 0; i < lines.length; i++) {\n      if (\n        true\n        // lines[i].ax === -16.710964026067217 ||\n        // lines[i].bx === -16.710964026067217\n      ) {\n        const hypoDistance = Math.sqrt(\n          Math.pow(lines[i].ax - lines[i].bx, 2) +\n            Math.pow(lines[i].ay - lines[i].by, 2)\n        );\n        const halfHypoDistance = hypoDistance / 2;\n        const yDiff = lines[i].by - lines[i].ay;\n        const xDiff = lines[i].bx - lines[i].ax;\n        const slope = yDiff / xDiff;\n        const invSlope = -(1 / slope);\n        const midpoint = [\n          (lines[i].ax + lines[i].bx) / 2,\n          (lines[i].ay + lines[i].by) / 2,\n        ];\n\n        const slopeChange = halfHypoDistance * Math.sin(Math.atan(slope));\n        const invSlopeChange = halfHypoDistance * Math.sin(Math.atan(invSlope));\n\n        const left = [\n          xDiff > 0 ? midpoint[0] + slopeChange : midpoint[0] - slopeChange,\n          yDiff > 0\n            ? midpoint[1] + invSlopeChange\n            : midpoint[1] - invSlopeChange,\n        ];\n        const right = [\n          xDiff < 0 ? midpoint[0] + slopeChange : midpoint[0] - slopeChange,\n          yDiff < 0\n            ? midpoint[1] + invSlopeChange\n            : midpoint[1] - invSlopeChange,\n        ];\n\n        allWings.push({\n          left: left,\n          right: right,\n        });\n      }\n    }\n    setWings(allWings);\n    return allWings;\n  };\n\n  const calcWingsScores = (wings) => {\n    const wingsMinDistanceToPath = [];\n\n    let lMinDist = Number.MAX_SAFE_INTEGER;\n    let rMinDist = Number.MAX_SAFE_INTEGER;\n    let smallestDist = Number.MAX_SAFE_INTEGER;\n\n    for (let i = 0; i < wings.length; i++) {\n      for (let j = 0; j < nodes.length; j++) {\n        const lDist = Math.sqrt(\n          Math.pow(wings[i].left[0] - nodes[j].x, 2) +\n            Math.pow(wings[i].left[1] - nodes[j].y, 2)\n        );\n        const rDist = Math.sqrt(\n          Math.pow(wings[i].right[0] - nodes[j].x, 2) +\n            Math.pow(wings[i].right[1] - nodes[j].y, 2)\n        );\n        if (lMinDist < smallestDist && rMinDist < smallestDist) {\n          smallestDist = Math.max(lMinDist, rMinDist);\n        }\n        if (i + 1 !== j && i - 1 !== j) {\n          lMinDist = lDist < lMinDist ? lDist : lMinDist;\n          rMinDist = rDist < rMinDist ? rDist : rMinDist;\n        }\n      }\n      wingsMinDistanceToPath.push({ left: lMinDist, right: rMinDist });\n      lMinDist = Number.MAX_SAFE_INTEGER;\n      rMinDist = Number.MAX_SAFE_INTEGER;\n    }\n\n    setWingsScores([wingsMinDistanceToPath, smallestDist]);\n    return [wingsMinDistanceToPath, smallestDist];\n  };\n\n  const calcSquares = (lines, wings, wingsScores, smallestDist) => {\n    const allSquares = [];\n\n    for (let i = 0; i < wingsScores.length; i++) {\n      const target = smallestDist + precision;\n      if (\n        -target <= wingsScores[i].left &&\n        wingsScores[i].left <= target &&\n        -target <= wingsScores[i].right &&\n        wingsScores[i].right <= target\n      ) {\n        allSquares.push({\n          a: [lines[i].ax, lines[i].ay],\n          b: wings[i].left,\n          c: [lines[i].bx, lines[i].by],\n          d: wings[i].right,\n        });\n      }\n    }\n    setSquares(allSquares);\n  };\n\n  useEffect(() => {\n    const nodes = calcNodes();\n    const lines = calcLines(nodes);\n    calcWings(lines);\n    scanPos >= sampleCount && setScanPos(0);\n    // eslint-disable-next-line\n  }, [dPath, sampleCount, scanPos]);\n\n  useEffect(() => {\n    if (wings.length > 0) {\n      calcWingsScores(wings);\n    }\n    // eslint-disable-next-line\n  }, [wings]);\n\n  useEffect(() => {\n    if (wingsScores.length > 0) {\n      calcSquares(lines, wings, wingsScores[0], wingsScores[1]);\n    }\n    // eslint-disable-next-line\n  }, [wingsScores, precision]);\n\n  return (\n    <>\n      <Sidebar\n        width={300}\n        height=\"100vh\"\n        dPath={dPath}\n        setDPath={setDPath}\n        sampleCount={sampleCount}\n        setSampleCount={setSampleCount}\n        precision={precision}\n        setprecision={setprecision}\n        showLines={showLines}\n        setShowLines={setShowLines}\n        showWings={showWings}\n        setShowWings={setShowWings}\n        scanPos={scanPos}\n        setScanPos={setScanPos}\n      />\n      <div className=\"svgWrap\">\n        <SVGMap\n          svgGeom={svgGeom}\n          dPath={dPath}\n          nodes={nodes}\n          lines={lines}\n          wings={wings}\n          squares={squares}\n          showLines={showLines}\n          showWings={showWings}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SVGDisplay;\n","import React, { useState } from \"react\";\nimport SVGDisplay from \"./hook/svgDisplay.js\";\nimport \"./App.css\";\n\nconst Loaded = ({ wasm }) => {\n  return (\n    <div>\n      <button onClick={wasm.greet}>Click me</button>\n    </div>\n  );\n};\nconst Unloaded = ({ loading, loadWasm }) => {\n  return loading ? (\n    <div>Loading...</div>\n  ) : (\n    <>\n      <button onClick={loadWasm}>Load Wasm</button>\n    </>\n  );\n};\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [wasm, setWasm] = useState(null);\n\n  const loadWasm = async () => {\n    try {\n      setLoading(true);\n      const wasm = await import(\"wasm_insquare\");\n      setWasm(wasm);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {wasm ? (\n          <Loaded wasm={wasm} />\n        ) : (\n          <Unloaded loading={loading} loadWasm={loadWasm} />\n        )}\n      </header>\n      {wasm ? <SVGDisplay /> : <SVGDisplay />}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}