{"version":3,"sources":["hook/sidebar.js","hook/jordan.js","hook/sampleDot.js","hook/line.js","hook/wings.js","hook/square.js","hook/svgMap.js","hook/svgDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","width","height","dPath","setDPath","sampleCount","setSampleCount","precision","setprecision","view","setView","showLines","setShowLines","showLWings","setShowLWings","showRWings","setShowRWings","showSquares","setShowSquares","scanPos","setScanPos","useState","xPosition","setX","useForm","defaultValues","handleSubmit","register","errors","useEffect","className","style","transform","minHeight","onClick","onSubmit","value","length","Number","selectView","htmlFor","id","type","name","ref","required","validate","str","toLowerCase","message","defaultValue","axis","xstep","xmin","xmax","x","disabled","onChange","res","defaultChecked","Jordan","fill","d","cx","cy","r","Line","line","a","b","x1","y1","x2","y2","strokeWidth","stroke","Wings","wings","left","right","Square","square","c","console","log","SVGMap","svgGeom","nodes","lines","squares","wingsScores","matrix","setMatrix","dragging","setDragging","startX","setStartX","startY","setStartY","zoom","scale","m","len","i","onDragStart","e","startPosX","clientX","changedTouches","startPosY","clientY","onDragMove","y","dx","dy","pan","onDragEnd","viewBox","xmlns","onMouseDown","onTouchStart","onMouseMove","onTouchMove","onMouseUp","onTouchEnd","onWheel","deltaY","join","map","node","key","wing","SVGDisplay","useRef","setNodes","setLines","setWings","setWingsScores","setSquares","allWings","halfHypoDistance","Math","sqrt","pow","yDiff","xDiff","slope","invSlope","midpoint","slopeChange","sin","atan","invSlopeChange","push","calcWings","posA","allLines","posD","posC","offSetB","nextPos","offset","posB","calcLines","properties","svgPathProperties","totalLength","getTotalLength","allNodes","getPointAtLength","calcNodes","wingsMinDistanceToPath","lMinDist","MAX_SAFE_INTEGER","rMinDist","smallestDist","j","lDist","rDist","max","calcWingsScores","requiredDist","allSquares","target","calcSquares","Loaded","wasm","greet","Unloaded","loading","loadWasm","App","setLoading","setWasm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.262a778a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Slider from \"react-input-slider\";\n\nconst Sidebar = ({\n  width,\n  height,\n  dPath,\n  setDPath,\n  sampleCount,\n  setSampleCount,\n  precision,\n  setprecision,\n  view,\n  setView,\n  showLines,\n  setShowLines,\n  showLWings,\n  setShowLWings,\n  showRWings,\n  setShowRWings,\n  showSquares,\n  setShowSquares,\n  scanPos,\n  setScanPos,\n}) => {\n  const [xPosition, setX] = useState(-width);\n\n  const { handleSubmit, register, errors } = useForm({\n    defaultValues: {\n      dPath,\n      sampleCount,\n      precision,\n      showLines,\n      showLWings,\n      showRWings,\n    },\n  });\n\n  const onSubmit = (value) => {\n    value.dPath && value.dPath.length > 0 && setDPath(value.dPath);\n    value.sampleCount && setSampleCount(Number(value.sampleCount));\n    value.precision && setprecision(Number(value.precision));\n    value.selectView && setView(Number(value.selectView));\n    typeof value.showLines && setShowLines(value.showLines);\n    typeof value.showLWings && setShowLWings(value.showLWings);\n    typeof value.showRWings && setShowRWings(value.showRWings);\n    typeof value.showSquares && setShowSquares(value.showSquares);\n  };\n\n  const toggleMenu = () => {\n    if (xPosition < 0) {\n      setX(0);\n    } else {\n      setX(-width);\n    }\n  };\n\n  useEffect(() => {\n    setX(0);\n  }, []);\n\n  return (\n    <>\n      <div\n        className=\"side-bar\"\n        style={{\n          transform: `translatex(${xPosition}px)`,\n          width: width - 30,\n          minHeight: height,\n        }}\n      >\n        <button\n          onClick={() => toggleMenu()}\n          className=\"toggle-menu\"\n          style={{\n            transform: `translate(${width - 30}px, 2vh)`,\n          }}\n        ></button>\n        <div className=\"content\">\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <h3>Generate Path</h3>\n            <div>\n              <label htmlFor=\"dPath\">SVG Path: </label>\n              <input\n                id=\"dPath\"\n                type=\"text\"\n                name=\"dPath\"\n                className=\"field\"\n                ref={register({\n                  required: false,\n                  validate: (str) =>\n                    (str &&\n                      str[0].toLowerCase() === \"m\" &&\n                      str[str.length - 1].toLowerCase() === \"z\") ||\n                    \"Please format SVG Path correctly, beginning with M and closing with Z\",\n                })}\n              />\n              <p className=\"error-message\">\n                {errors.dPath && errors.dPath.message}\n              </p>\n            </div>\n\n            <div>\n              <label htmlFor=\"sampleCount\">Sample Count: </label>\n              <input\n                id=\"sampleCount\"\n                type=\"text\"\n                name=\"sampleCount\"\n                className=\"field\"\n                ref={register({\n                  validate: (value) =>\n                    (0 <= value && value <= 1000) ||\n                    \"Samples only go up to 1000\",\n                })}\n              />\n              <p className=\"error-message\">\n                {errors.sampleCount && errors.sampleCount.message}\n              </p>\n            </div>\n\n            <div>\n              <label htmlFor=\"precision\">Precision: </label>\n              <input\n                id=\"precision\"\n                type=\"text\"\n                name=\"precision\"\n                className=\"field\"\n                ref={register({\n                  validate: (value) =>\n                    (0 <= value && value <= 1) || \"Please stay between 0 and 1\",\n                })}\n              />\n              <p className=\"error-message\">\n                {errors.precision && errors.precision.message}\n              </p>\n            </div>\n\n            <hr />\n            <h3>Select View</h3>\n\n            <div>\n              <label htmlFor=\"selectView\">Select View:</label>\n              <div>\n                <select\n                  id=\"selectView\"\n                  name=\"selectView\"\n                  className=\"select-field field\"\n                  defaultValue={view}\n                  ref={register({\n                    validate: (value) =>\n                      (0 <= value && value < 3) ||\n                      \"Please select a valuid value\",\n                  })}\n                >\n                  <option value={0}>Full</option>\n                  <option value={1}>Point</option>\n                  <option value={2}>Ring</option>\n                </select>\n              </div>\n              <p className=\"error-message\">\n                {errors.selectView && errors.selectView.message}\n              </p>\n            </div>\n\n            <div className={view === 0 ? \"disabled\" : \"\"}>\n              {\"Node: \" + scanPos}\n            </div>\n            <Slider\n              className=\"slider\"\n              axis=\"x\"\n              xstep={1}\n              xmin={0}\n              xmax={sampleCount - 2}\n              x={scanPos}\n              disabled={view === 0}\n              onChange={(res) => setScanPos(res.x)}\n            />\n\n            <hr />\n            <h3>Show Features</h3>\n\n            <div>\n              <label className=\"checkLabel\" htmlFor=\"showLines\">\n                <div>\n                  <input\n                    id=\"showLines\"\n                    type=\"checkbox\"\n                    className=\"checkbox\"\n                    name=\"showLines\"\n                    defaultChecked={showLines}\n                    ref={register}\n                  />\n                  Lines\n                </div>\n              </label>\n              <p className=\"error-message\">\n                {errors.showLines && errors.showLines.message}\n              </p>\n            </div>\n\n            <div>\n              <label className=\"checkLabel\" htmlFor=\"showLWings\">\n                <div>\n                  <input\n                    id=\"showLWings\"\n                    type=\"checkbox\"\n                    className=\"checkbox\"\n                    name=\"showLWings\"\n                    defaultChecked={showLWings}\n                    ref={register}\n                  />\n                  Left Wings\n                </div>\n              </label>\n              <p className=\"error-message\">\n                {errors.showLWings && errors.showLWings.message}\n              </p>\n            </div>\n\n            <div>\n              <label className=\"checkLabel\" htmlFor=\"showRWings\">\n                <div>\n                  <input\n                    id=\"showRWings\"\n                    type=\"checkbox\"\n                    className=\"checkbox\"\n                    name=\"showRWings\"\n                    defaultChecked={showRWings}\n                    ref={register}\n                  />\n                  Right Wings\n                </div>\n              </label>\n              <p className=\"error-message\">\n                {errors.showRWings && errors.showRWings.message}\n              </p>\n            </div>\n\n            <div>\n              <label className=\"checkLabel\" htmlFor=\"showSquares\">\n                <div>\n                  <input\n                    id=\"showSquares\"\n                    type=\"checkbox\"\n                    className=\"checkbox\"\n                    name=\"showSquares\"\n                    defaultChecked={showSquares}\n                    ref={register}\n                  />\n                  Squares\n                </div>\n              </label>\n              <p className=\"error-message\">\n                {errors.showSquares && errors.showSquares.message}\n              </p>\n            </div>\n\n            <div className=\"submit-area\">\n              <button className=\"submit-button content-button\" type=\"submit\">\n                Generate\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\n\nconst Jordan = ({ dPath, transform }) => {\n  return (\n    <>\n      <path fill=\"#FF0066\" d={dPath} transform={transform} />\n    </>\n  );\n};\n\nexport default Jordan;\n","import React from \"react\";\n\nconst Jordan = ({ id, cx, cy, transform }) => {\n  return (\n    <>\n      <circle\n        id={id}\n        cx={cx}\n        cy={cy}\n        r=\".5\"\n        fill=\"blue\"\n        transform={transform}\n      />\n    </>\n  );\n};\n\nexport default Jordan;\n","import React from \"react\";\n\nconst Line = ({ line, transform }) => {\n  const { a, b } = line;\n  return (\n    <>\n      <line\n        x1={a[0]}\n        y1={a[1]}\n        x2={b[0]}\n        y2={b[1]}\n        strokeWidth=\".1\"\n        stroke=\"cyan\"\n        transform={transform}\n      />\n    </>\n  );\n};\n\nexport default Line;\n","import React from \"react\";\n\nconst Wings = ({\n  line,\n  wings,\n  showLWings,\n  showRWings,\n  strokeWidth,\n  transform,\n}) => {\n  const { a, b } = line;\n  const { left, right } = wings;\n  // const colors = [\n  //   \"#363f9c\",\n  //   \"#464096\",\n  //   \"#564190\",\n  //   \"#66438a\",\n  //   \"#764483\",\n  //   \"#86457d\",\n  //   \"#954777\",\n  //   \"#a54871\",\n  //   \"#b5496b\",\n  //   \"#c54a64\",\n  //   \"#d54b5e\",\n  //   \"#e54d58\",\n  //   \"#f54e52\",\n  // ];\n  return (\n    <>\n      {showLWings && (\n        <>\n          <line\n            x1={a[0]}\n            y1={a[1]}\n            x2={left[0]}\n            y2={left[1]}\n            strokeWidth={strokeWidth}\n            stroke=\"purple\"\n            transform={transform}\n          />\n          <circle\n            cx={left[0]}\n            cy={left[1]}\n            r=\".5\"\n            fill=\"purple\"\n            transform={transform}\n          />\n          {/* <line\n        x1={bx}\n        y1={by}\n        x2={left[0]}\n        y2={left[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"green\"\n        transform={transform}\n      /> */}\n        </>\n      )}\n      {showRWings && (\n        <>\n          <line\n            x1={a[0]}\n            y1={a[1]}\n            x2={right[0]}\n            y2={right[1]}\n            strokeWidth={strokeWidth}\n            stroke=\"blue\"\n            transform={transform}\n          />\n          <circle\n            cx={right[0]}\n            cy={right[1]}\n            r=\".5\"\n            fill=\"blue\"\n            transform={transform}\n          />\n          {/* <line\n        x1={bx}\n        y1={by}\n        x2={right[0]}\n        y2={right[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"green\"\n        transform={transform}\n      /> */}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Wings;\n","import React from \"react\";\n\nconst Square = ({ square, strokeWidth, transform }) => {\n  const { a, b, c, d } = square;\n  console.log(square);\n\n  return (\n    <>\n      <line\n        x1={a[0]}\n        y1={a[1]}\n        x2={b[0]}\n        y2={b[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"black\"\n        transform={transform}\n      />\n      <line\n        x1={b[0]}\n        y1={b[1]}\n        x2={c[0]}\n        y2={c[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"black\"\n        transform={transform}\n      />\n      <line\n        x1={c[0]}\n        y1={c[1]}\n        x2={d[0]}\n        y2={d[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"black\"\n        transform={transform}\n      />\n      <line\n        x1={d[0]}\n        y1={d[1]}\n        x2={a[0]}\n        y2={a[1]}\n        strokeWidth={strokeWidth}\n        stroke=\"black\"\n        transform={transform}\n      />\n    </>\n  );\n};\n\nexport default Square;\n","import React, { useState } from \"react\";\nimport Jordan from \"./jordan\";\nimport SampleDot from \"./sampleDot\";\nimport Line from \"./line\";\nimport Wings from \"./wings\";\nimport Square from \"./square\";\n\nconst SVGMap = ({\n  svgGeom,\n  dPath,\n  nodes,\n  lines,\n  wings,\n  wingsScores,\n  squares,\n  showLines,\n  showLWings,\n  showRWings,\n  showSquares,\n}) => {\n  const [matrix, setMatrix] = useState([2, 0, 0, 2, 200, 200]);\n  const [dragging, setDragging] = useState(false);\n  const [startX, setStartX] = useState(0);\n  const [startY, setStartY] = useState(0);\n\n  const pan = (dx, dy) => {\n    const m = [...matrix];\n    m[4] += dx;\n    m[5] += dy;\n    setMatrix(m);\n  };\n\n  const zoom = (scale) => {\n    const m = [...matrix];\n    const len = m.length;\n    for (let i = 0; i < len; i++) {\n      m[i] *= scale;\n    }\n    m[4] += ((1 - scale) * 400) / 2;\n    m[5] += ((1 - scale) * 400) / 2;\n    setMatrix(m);\n  };\n\n  const onDragStart = (e) => {\n    const startPosX =\n      typeof e.clientX === \"undefined\"\n        ? e.changedTouches[0].clientX\n        : e.clientX;\n    const startPosY =\n      typeof e.clientY === \"undefined\"\n        ? e.changedTouches[0].clientY\n        : e.clientY;\n\n    setDragging(true);\n    setStartX(startPosX);\n    setStartY(startPosY);\n  };\n\n  const onDragMove = (e) => {\n    if (!dragging) {\n      return;\n    }\n\n    const x =\n      typeof e.clientX === \"undefined\"\n        ? e.changedTouches[0].clientX\n        : e.clientX;\n    const y =\n      typeof e.clientY === \"undefined\"\n        ? e.changedTouches[0].clientY\n        : e.clientY;\n\n    console.log(x, y);\n    const dx = x - startX;\n    const dy = y - startY;\n\n    pan(dx, dy);\n\n    setStartX(x);\n    setStartY(y);\n  };\n\n  const onDragEnd = () => {\n    setDragging(false);\n  };\n\n  const onWheel = (e) => {\n    if (e.deltaY < 0) {\n      zoom(1.05);\n    } else {\n      zoom(0.95);\n    }\n  };\n\n  return (\n    <>\n      {/* <svg\n        className=\"svg\"\n        width=\"100px\"\n        height=\"100px\"\n        viewBox=\"0 0 400 400\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        onMouseDown={(e) => onDragStart(e)}\n        onTouchStart={(e) => onDragStart(e)}\n        onMouseMove={(e) => onDragMove(e)}\n        onTouchMove={(e) => onDragMove(e)}\n        onMouseUp={(e) => onDragEnd(e)}\n        onTouchEnd={(e) => onDragEnd(e)}\n        onWheel={(e) => onWheel(e)}\n      >\n        {wingsScores &&\n          wingsScores[0] &&\n          wingsScores[0].length > 0 &&\n          wingsScores[0].map((score, i) => (\n            <>\n              <circle\n                key={\"d\" + i}\n                cx={(200 / wingsScores[0].length) * i * 1 - 100}\n                cy={score.left * 3 - 200}\n                data-value=\"7.2\"\n                r=\"2\"\n                fill=\"red\"\n              ></circle>\n              <circle\n                key={\"e\" + i}\n                cx={(200 / wingsScores[0].length) * i * 1 - 100}\n                cy={score.right * 3 - 200}\n                data-value=\"7.2\"\n                r=\"2\"\n                fill=\"green\"\n              ></circle>\n            </>\n          ))}\n      </svg> */}\n      <svg\n        className=\"svg\"\n        ref={svgGeom}\n        width=\"100px\"\n        height=\"100px\"\n        viewBox=\"0 0 400 400\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        onMouseDown={(e) => onDragStart(e)}\n        onTouchStart={(e) => onDragStart(e)}\n        onMouseMove={(e) => onDragMove(e)}\n        onTouchMove={(e) => onDragMove(e)}\n        onMouseUp={(e) => onDragEnd(e)}\n        onTouchEnd={(e) => onDragEnd(e)}\n        onWheel={(e) => onWheel(e)}\n      >\n        <g transform={`matrix(${matrix.join(\" \")})`}>\n          <Jordan dPath={dPath} />\n          {nodes.map((node, i) =>\n            lines.length > 1000 && i % 10 === 0 ? (\n              <SampleDot key={i + \"a\"} cx={node.x} cy={node.y} />\n            ) : (\n              <SampleDot key={i + \"a\"} cx={node.x} cy={node.y} />\n            )\n          )}\n          {showLines &&\n            lines.length < 24000 &&\n            lines.map((line, i) => <Line key={i} line={line} />)}\n          {(showLWings || showRWings) &&\n            wings.length < 24000 &&\n            wings.map((wing, i) =>\n              wings.length > 1000 && i % 2 === 0 ? (\n                <Wings\n                  key={i}\n                  line={lines[i]}\n                  wings={wing}\n                  strokeWidth=\".1\"\n                  showLWings={showLWings}\n                  showRWings={showRWings}\n                />\n              ) : (\n                <Wings\n                  key={i}\n                  line={lines[i]}\n                  wings={wing}\n                  strokeWidth=\".1\"\n                  showLWings={showLWings}\n                  showRWings={showRWings}\n                />\n              )\n            )}\n          {showSquares &&\n            squares.map((square, i) => (\n              <Square key={i} square={square} strokeWidth=\".5\" />\n            ))}\n        </g>\n      </svg>\n    </>\n  );\n};\n\nexport default SVGMap;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Sidebar from \"./sidebar\";\nimport SVGMap from \"./svgMap\";\n\nimport { svgPathProperties } from \"svg-path-properties\";\n\nconst SVGDisplay = () => {\n  const svgGeom = useRef(null);\n\n  const [dPath, setDPath] = useState(\n    \"M25.1,-46.5C31.3,-40,33.9,-30.6,43.3,-22.3C52.7,-14.1,68.8,-7,76.2,4.2C83.5,15.5,82.1,31.1,68.2,31.5C54.4,32,28,17.4,14.5,17.2C1.1000000000000014,17,0.5,31.1,-8,45C-16.6,58.9,-33.1,72.5,-42.5,70.3C-51.9,68.2,-54.1,50.3,-62,36C-69.9,21.7,-83.6,10.8,-75,5C-66.4,-0.9000000000000004,-35.6,-1.8000000000000007,-21.4,-5.300000000000001C-7.200000000000003,-8.799999999999997,-9.7,-14.899999999999999,-8.899999999999999,-24.5C-8.1,-34,-4,-47,2.7,-51.7C9.5,-56.4,19,-53,25.1,-46.5Z\"\n  );\n  // M25.1,-46.5C31.3,-40,33.9,-30.6,43.3,-22.3C52.7,-14.1,68.8,-7,76.2,4.2C83.5,15.5,82.1,31.1,68.2,31.5C54.4,32,28,17.4,14.5,17.2C1.1000000000000014,17,0.5,31.1,-8,45C-16.6,58.9,-33.1,72.5,-42.5,70.3C-51.9,68.2,-54.1,50.3,-62,36C-69.9,21.7,-83.6,10.8,-75,5C-66.4,-0.9000000000000004,-35.6,-1.8000000000000007,-21.4,-5.300000000000001C-7.200000000000003,-8.799999999999997,-9.7,-14.899999999999999,-8.899999999999999,-24.5C-8.1,-34,-4,-47,2.7,-51.7C9.5,-56.4,19,-53,25.1,-46.5Z\n\n  // Circle M 25, 50 a 25,25 0 1,1 50,0 a 25,25 0 1,1 -50,0 Z\n  // Wikipedia Shape m 400,50 c -48.61208,1.07651 -79.49136,32.02154 -100,50 -19.36644,16.97718 -29.05084,23.7887 -50,50 -20.94916,26.2113 -59.55948,77.23786 -54.92886,121.07651 C 198.50564,303.59136 281.56443,333.12777 300,350 c 17.14346,15.68969 16.4081,38.58305 0,50 -16.4081,11.41695 -130.70967,10.21616 -150,40 -18.94578,29.25187 -11.37575,85.56467 0,110 16.35159,35.12352 124.80257,141.00452 150,150 25.26029,9.01792 40.46624,14.05936 78.30067,3.99463 C 415.8811,693.99747 524.40766,662.35702 550,650 575.59234,637.64298 583.83375,621.17894 560,600 528.02901,571.59021 485.82706,569.19496 450,550 414.17294,530.80504 380.10343,478.6601 411.375,458.625 442.64657,438.5899 469.2608,428.46921 510,450 c 40.7392,21.53079 152.87063,103.40526 200,100 47.12937,-3.40527 28.20294,-57.72911 10,-90 -18.20295,-32.27089 -29.83895,-42.74004 -60,-60 -30.16105,-17.25996 -73.3212,-11.75005 -110,-50 -36.67881,-38.24995 13.41017,-45.75091 49.6875,-51.375 C 635.96483,293.0009 670.55552,292.02641 650,250 629.44448,207.97359 587.82168,127.16472 550,100 512.17832,72.83528 448.61208,48.92349 400,50 z\n  // M0 0 Q50 30 100 0 70 50 100 100 50 70 0 100 30 50 0 0Z\n  const [sampleCount, setSampleCount] = useState(150);\n  const [nodes, setNodes] = useState([]);\n  const [lines, setLines] = useState([]);\n  const [wings, setWings] = useState([]);\n  const [wingsScores, setWingsScores] = useState([]);\n  const [squares, setSquares] = useState([]);\n\n  const [view, setView] = useState(1);\n\n  const [showLines, setShowLines] = useState(false);\n  const [showLWings, setShowLWings] = useState(true);\n  const [showRWings, setShowRWings] = useState(true);\n  const [showSquares, setShowSquares] = useState(true);\n\n  const [precision, setprecision] = useState(0.08);\n  const [scanPos, setScanPos] = useState(0);\n\n  const calcNodes = () => {\n    const properties = new svgPathProperties(dPath);\n    const totalLength = properties.getTotalLength();\n\n    const allNodes = [];\n\n    for (let i = 1; i <= sampleCount; i++) {\n      allNodes.push(\n        properties.getPointAtLength((1 / sampleCount) * totalLength * i)\n      );\n    }\n\n    setNodes(allNodes);\n    return allNodes;\n  };\n\n  const calcLines = (nodes) => {\n    let posA = 0;\n    const allLines = [];\n\n    switch (view) {\n      case 1:\n        const posD = scanPos < sampleCount ? scanPos : 0;\n        let posC = posD + 1;\n        while (posC !== posD) {\n          allLines.push({\n            a: [nodes[posD].x, nodes[posD].y],\n            b: [nodes[posC].x, nodes[posC].y],\n          });\n          posC === sampleCount - 1 ? (posC = 0) : posC++;\n        }\n        break;\n\n      case 2:\n        let offSetB = scanPos + 1;\n        while (posA < sampleCount) {\n          const nextPos = (posA + offSetB) % sampleCount;\n          allLines.push({\n            a: [nodes[posA].x, nodes[posA].y],\n            b: [nodes[nextPos].x, nodes[nextPos].y],\n          });\n          posA++;\n        }\n        break;\n\n      default:\n        let offset = posA + 1;\n        while (offset < sampleCount / 2 + 1) {\n          while (posA < sampleCount) {\n            const posB = (posA + offset) % sampleCount;\n            allLines.push({\n              a: [nodes[posA].x, nodes[posA].y],\n              b: [nodes[posB].x, nodes[posB].y],\n            });\n            posA++;\n          }\n          posA = 0;\n          offset++;\n        }\n    }\n\n    setLines(allLines);\n    return allLines;\n  };\n\n  const calcWings = (lines) => {\n    const allWings = [];\n\n    for (let i = 0; i < lines.length; i++) {\n      const hypoDistance = Math.sqrt(\n        Math.pow(lines[i].a[0] - lines[i].b[0], 2) +\n          Math.pow(lines[i].a[1] - lines[i].b[1], 2)\n      );\n      const halfHypoDistance = hypoDistance / 2;\n      const yDiff = lines[i].b[1] - lines[i].a[1];\n      const xDiff = lines[i].b[0] - lines[i].a[0];\n      const slope = yDiff / xDiff;\n      const invSlope = -(1 / slope);\n      const midpoint = [\n        (lines[i].a[0] + lines[i].b[0]) / 2,\n        (lines[i].a[1] + lines[i].b[1]) / 2,\n      ];\n\n      const slopeChange = halfHypoDistance * Math.sin(Math.atan(slope));\n      const invSlopeChange = halfHypoDistance * Math.sin(Math.atan(invSlope));\n\n      const left = [\n        xDiff > 0 ? midpoint[0] + slopeChange : midpoint[0] - slopeChange,\n        yDiff > 0 ? midpoint[1] + invSlopeChange : midpoint[1] - invSlopeChange,\n      ];\n      const right = [\n        xDiff < 0 ? midpoint[0] + slopeChange : midpoint[0] - slopeChange,\n        yDiff < 0 ? midpoint[1] + invSlopeChange : midpoint[1] - invSlopeChange,\n      ];\n\n      // index 0: left Wing\n      // index 1: right Wing\n      allWings.push({\n        left: left,\n        right: right,\n      });\n    }\n    setWings(allWings);\n    return allWings;\n  };\n\n  const calcWingsScores = (wings) => {\n    const wingsMinDistanceToPath = [];\n\n    let lMinDist = Number.MAX_SAFE_INTEGER;\n    let rMinDist = Number.MAX_SAFE_INTEGER;\n    let smallestDist = Number.MAX_SAFE_INTEGER;\n\n    for (let i = 0; i < wings.length; i++) {\n      for (let j = 0; j < nodes.length; j++) {\n        const lDist = Math.sqrt(\n          Math.pow(wings[i].left[0] - nodes[j].x, 2) +\n            Math.pow(wings[i].left[1] - nodes[j].y, 2)\n        );\n        const rDist = Math.sqrt(\n          Math.pow(wings[i].right[0] - nodes[j].x, 2) +\n            Math.pow(wings[i].right[1] - nodes[j].y, 2)\n        );\n        if (lMinDist < smallestDist && rMinDist < smallestDist) {\n          smallestDist = Math.max(lMinDist, rMinDist);\n        }\n        if (i + 1 !== j && i - 1 !== j) {\n          lMinDist = lDist < lMinDist ? lDist : lMinDist;\n          rMinDist = rDist < rMinDist ? rDist : rMinDist;\n        }\n      }\n      wingsMinDistanceToPath.push({ left: lMinDist, right: rMinDist });\n      lMinDist = Number.MAX_SAFE_INTEGER;\n      rMinDist = Number.MAX_SAFE_INTEGER;\n    }\n\n    setWingsScores([wingsMinDistanceToPath, smallestDist]);\n    return [wingsMinDistanceToPath, smallestDist];\n  };\n\n  const calcSquares = (\n    lines,\n    wings,\n    wingsScores,\n    smallestDist,\n    requiredDist\n  ) => {\n    const allSquares = [];\n\n    for (let i = 0; i < wingsScores.length; i++) {\n      const target = smallestDist + precision;\n\n      if (\n        target < requiredDist &&\n        -target <= wingsScores[i].left &&\n        wingsScores[i].left <= target &&\n        -target <= wingsScores[i].right &&\n        wingsScores[i].right <= target\n      ) {\n        allSquares.push({\n          a: lines[i].a,\n          b: wings[i].left,\n          c: lines[i].b,\n          d: wings[i].right,\n        });\n      }\n    }\n    setSquares(allSquares);\n  };\n\n  useEffect(() => {\n    const nodes = calcNodes();\n    const lines = calcLines(nodes);\n    calcWings(lines);\n    scanPos >= sampleCount && setScanPos(0);\n    // eslint-disable-next-line\n  }, [view, dPath, sampleCount, scanPos]);\n\n  useEffect(() => {\n    if (wings.length > 0) {\n      calcWingsScores(wings);\n    }\n    // eslint-disable-next-line\n  }, [wings]);\n\n  useEffect(() => {\n    /* \n    Minimum required distance to create a square must be greater than distance\n    between two first 2 points on divided svg path\n    */\n    const requiredDist =\n      lines && lines.length > 0\n        ? Math.sqrt(\n            Math.pow(lines[0].b[0] - lines[0].a[0], 2) +\n              Math.pow(lines[0].b[1] - lines[0].a[1], 2)\n          ) / 2\n        : 0;\n    if (wingsScores.length > 0) {\n      calcSquares(lines, wings, wingsScores[0], wingsScores[1], requiredDist);\n    }\n    // eslint-disable-next-line\n  }, [wingsScores, precision]);\n\n  return (\n    <>\n      <Sidebar\n        width={300}\n        height=\"100vh\"\n        dPath={dPath}\n        setDPath={setDPath}\n        sampleCount={sampleCount}\n        setSampleCount={setSampleCount}\n        precision={precision}\n        setprecision={setprecision}\n        view={view}\n        setView={setView}\n        showLines={showLines}\n        setShowLines={setShowLines}\n        showLWings={showLWings}\n        setShowLWings={setShowLWings}\n        showRWings={showRWings}\n        setShowRWings={setShowRWings}\n        showSquares={showSquares}\n        setShowSquares={setShowSquares}\n        scanPos={scanPos}\n        setScanPos={setScanPos}\n      />\n\n      <div className=\"svgWrap\">\n        <SVGMap\n          svgGeom={svgGeom}\n          dPath={dPath}\n          nodes={nodes}\n          lines={lines}\n          wings={wings}\n          wingsScores={wingsScores}\n          squares={squares}\n          showLines={showLines}\n          showLWings={showLWings}\n          showRWings={showRWings}\n          showSquares={showSquares}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SVGDisplay;\n","import React, { useState } from \"react\";\nimport SVGDisplay from \"./hook/svgDisplay.js\";\nimport \"./App.css\";\n\nconst Loaded = ({ wasm }) => {\n  return (\n    <div>\n      <button onClick={wasm.greet}>Click me</button>\n    </div>\n  );\n};\nconst Unloaded = ({ loading, loadWasm }) => {\n  return loading ? (\n    <div>Loading...</div>\n  ) : (\n    <>\n      <button onClick={loadWasm}>Load Wasm</button>\n    </>\n  );\n};\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [wasm, setWasm] = useState(null);\n\n  const loadWasm = async () => {\n    try {\n      setLoading(true);\n      const wasm = await import(\"wasm_insquare\");\n      setWasm(wasm);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {wasm ? (\n          <Loaded wasm={wasm} />\n        ) : (\n          <Unloaded loading={loading} loadWasm={loadWasm} />\n        )}\n      </header>\n      {wasm ? <SVGDisplay /> : <SVGDisplay />}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}